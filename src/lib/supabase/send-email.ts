// supabase/functions/send-email-notification/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts'
import { Resend } from 'https://esm.sh/resend@1.0.0' // Ou o SDK do seu servi√ßo de e-mail

const resend = new Resend(Deno.env.get('RESEND_API_KEY')) // Sua chave de API do Resend

serve(async (req) => {
  if (req.method !== 'POST') {
    return new Response('Method Not Allowed', { status: 405 })
  }

  try {
    const { toEmail, customerName, newStatus, feedback } = await req.json()

    // L√≥gica para determinar o conte√∫do do e-mail com base no status
    let subject = ''
    let body = ''

    switch (newStatus) {
      case 'approved by the CSC team':
        subject = `üéâ Sua solicita√ß√£o foi APROVADA!`
        body = `Ol√° ${customerName},\n\nSua solicita√ß√£o foi aprovada pela equipe CSC e est√° progredindo! Estamos empolgados em t√™-lo(a) conosco.\n\nAtenciosamente,\nSua Equipe.`
        break
      case 'rejected by the CSC final team':
        subject = `‚ùå Sua solicita√ß√£o foi REJEITADA - A√ß√£o Necess√°ria`
        body = `Ol√° ${customerName},\n\nLamentamos informar que sua solicita√ß√£o foi rejeitada pela equipe CSC. Por favor, revise os detalhes e fa√ßa as corre√ß√µes necess√°rias. Feedback: ${feedback || 'Nenhum feedback espec√≠fico.'}\n\nAtenciosamente,\nSua Equipe.`
        break
      // Adicione mais casos para cada status (Tribut√°rio, Wholesale, Cr√©dito, etc.)
      case 'approved by the tax team':
        subject = `‚úÖ Sua solicita√ß√£o foi aprovada pela equipe Tribut√°ria!`
        body = `Ol√° ${customerName},\n\nSua solicita√ß√£o de cadastro avan√ßou e foi aprovada pela nossa equipe Tribut√°ria. O pr√≥ximo passo √© a an√°lise da equipe Wholesale.\n\nAtenciosamente,\nSua Equipe.`
        break
      case 'rejected by the tax team':
        subject = `‚ö†Ô∏è Sua solicita√ß√£o foi REJEITADA pela equipe Tribut√°ria`
        body = `Ol√° ${customerName},\n\nSua solicita√ß√£o foi revisada pela equipe Tribut√°ria e requer aten√ß√£o. Por favor, verifique o feedback e fa√ßa as corre√ß√µes. Feedback: ${feedback || 'Nenhum feedback espec√≠fico.'}\n\nAtenciosamente,\nSua Equipe.`
        break
      case 'approved by the wholesale team':
        subject = `üöÄ Sua solicita√ß√£o foi aprovada pela equipe Wholesale!`
        body = `Ol√° ${customerName},\n\nExcelente not√≠cia! Sua solicita√ß√£o foi aprovada pela nossa equipe Wholesale e seguir√° para a etapa de Cr√©dito.\n\nAtenciosamente,\nSua Equipe.`
        break
      case 'rejected by the wholesale team':
        subject = `üö´ Sua solicita√ß√£o foi REJEITADA pela equipe Wholesale`
        body = `Ol√° ${customerName},\n\nSua solicita√ß√£o foi rejeitada pela equipe Wholesale. Por favor, verifique o feedback e fa√ßa as corre√ß√µes. Feedback: ${feedback || 'Nenhum feedback espec√≠fico.'}\n\nAtenciosamente,\nSua Equipe.`
        break
      case 'approved by the credit team':
        subject = `ü•≥ Sua conta est√° APROVADA - Bem-vindo(a)!`
        body = `Ol√° ${customerName},\n\nParab√©ns! Sua conta foi aprovada por todas as nossas equipes e voc√™ est√° pronto(a) para come√ßar. Em breve voc√™ receber√° informa√ß√µes sobre os pr√≥ximos passos.\n\nAtenciosamente,\nSua Equipe.`
        break
      // Voc√™ pode adicionar um caso 'pending' ou 'data corrected by the client' se desejar notificar o cliente sobre o status inicial ou corre√ß√µes.
      default:
        subject = `Atualiza√ß√£o de Status da Sua Solicita√ß√£o`
        body = `Ol√° ${customerName},\n\nO status da sua solicita√ß√£o foi atualizado para: ${newStatus}.\n\nAtenciosamente,\nSua Equipe.`
        break
    }

    if (!toEmail || !subject || !body) {
      return new Response(JSON.stringify({ error: 'Missing email parameters' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      })
    }

    const { data, error } = await resend.emails.send({
      from: 'Seu Nome <jefersonferreira27@outlook.com>', // Use um e-mail de remetente verificado
      to: [toEmail],
      subject: subject,
      html: `<p>${body.replace(/\n/g, '<br/>')}</p>`, // Converte quebras de linha para HTML
    })

    if (error) {
      console.error('Error sending email:', error)
      return new Response(JSON.stringify({ error: error.message }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      })
    }

    return new Response(JSON.stringify({ message: 'Email sent successfully!', data }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    })
  } catch (error) {
    console.error('Request error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})