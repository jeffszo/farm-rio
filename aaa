// src/app/customer/form/page.tsx
"use client"
import React from "react"
import { useState, useEffect } from "react"
import { useForm } from "react-hook-form"
import { useRouter, useParams } from "next/navigation"
import * as S from "../../customer/styles"
import type { IFormInputs } from "../../../types/form"
import { api } from "../../../lib/supabase/index"
import { ChevronRight, ChevronLeft, Upload, CircleCheck, Plus, Trash2, Info } from "lucide-react"

const termsOptions = [
  { value: "", label: "Select terms" },
  { value: "100% Prior to Ship", label: "100% Prior to Ship" },
  { value: "Net 15", label: "Net 15" },
  { value: "Net 30", label: "Net 30" },
];

const currencyOptions = [
  { value: "", label: "Select currency" },
  { value: "USD", label: "USD" },
  { value: "EUR", label: "EUR" },
  { value: "GBP", label: "GBP" },
];

export default function OnboardingForm() {
  const [file, setFile] = useState<File | null>(null); // Para Resale Certificate
  const [imageFiles, setImageFiles] = useState<File[]>([]); // Para Multiple Images
  const [financialStatementsFile, setFinancialStatementsFile] =
    useState<File | null>(null); // ESTADO PARA O ARQUIVO FINANCIAL STATEMENTS
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [shippingAddress, setshippingAddress] = useState<number[]>([0]);
  const [isSameAsBilling, setIsSameAsBilling] = useState(false); // Novo estado para "Same as Billing"
  const [billingAddress, setbillingAddress] = useState<number[]>([0]);
  const [currentStep, setCurrentStep] = useState(1);
  const params = useParams();
const customerId = typeof params?.id === "string" ? params.id : "";

  const totalSteps = 4;
  const [user, setUser] = useState<{ id: string; userType?: string } | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(true);
  const [apiError, setApiError] = useState<string | null>(null);
  const router = useRouter();

  // Adicione esta linha para declarar e gerenciar o estado de validação do passo 4
  const [stepFourAttemptedValidation, setStepFourAttemptedValidation] =
    useState(false);

  const {
    register,
    handleSubmit: hookFormSubmit,
    formState: { errors },
    trigger,
    getValues,
    setValue,
    clearErrors, // Importe clearErrors
    setError, // Importe setError
  } = useForm<IFormInputs>({
    mode: "onChange",
    defaultValues: {
      billingAddress: [{} as any],
      shippingAddress: [{} as any],
      // Definir valor padrão para os selects para evitar erro de componente não controlado
      buyerInfo: {
        terms: "", // Valor vazio para a opção "Select terms"
        currency: "", // Valor vazio para a opção "Select currency"
        // ... outros campos de buyerInfo
      } as any, // Adicione 'as any' temporariamente se IFormInputs ainda não refletir os defaults
    },
  });

  const handleFinancialStatementsFileChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    if (event.target.files && event.target.files[0]) {
      const selectedFile = event.target.files[0];
      if (selectedFile.type !== "application/pdf") {
        setError("buyerInfo.financialStatements", {
          type: "manual",
          message: "Financial Statements devem ser um arquivo PDF.",
        });
        setFinancialStatementsFile(null); // Limpa o arquivo inválido
        console.log("Arquivo de Financial Statements inválido: não é PDF.");
        return;
      }
      setFinancialStatementsFile(selectedFile);
      // Limpa o erro se um arquivo for selecionado e for PDF válido
      clearErrors("buyerInfo.financialStatements");
      console.log(
        "Arquivo de Financial Statements selecionado:",
        selectedFile.name
      );
    } else {
      setFinancialStatementsFile(null);
      clearErrors("buyerInfo.financialStatements"); // Limpa o erro se nenhum arquivo for selecionado
      console.log("Nenhum arquivo de Financial Statements selecionado.");
    }
  };

  useEffect(() => {
    const fetchUser = async () => {
      const currentUser = await api.getCurrentUser();
      setUser(currentUser);
      setIsLoading(false);
    };
    fetchUser();
  }, []);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0];
    if (selectedFile) {
      if (selectedFile.type !== "application/pdf") {
        alert("Please upload a PDF file.");
        setFile(null); // Limpa o arquivo inválido
        console.log("Arquivo de Resale Certificate inválido: não é PDF.");
        return;
      }
      setFile(selectedFile);
      console.log(
        "Arquivo de Resale Certificate selecionado:",
        selectedFile.name
      );
    } else {
      setFile(null);
      console.log("Nenhum arquivo de Resale Certificate selecionado.");
    }
  };

  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    // É importante usar event.target.files aqui, pois event.files não existe.
    const files = Array.from(event.target.files || []);
    if (files.length > 0) {
      setImageFiles((prev) => [...prev, ...files]);
      console.log(
        "Imagens selecionadas:",
        files.map((f) => f.name)
      );
    } else {
      console.log("Nenhuma imagem selecionada.");
    }
  };

  const onSubmit = async (formData: IFormInputs) => {
    console.log("Submit button clicked. Starting onSubmit function.");
    try {
      setApiError(null);
      setIsUploading(true);
      console.log("isUploading set to true.");

      const currentUser = user || (await api.getCurrentUser());
      if (!currentUser || !currentUser.id) {
        console.error("User not authenticated. Redirecting to login.");
        setApiError(
          "Your session has expired or you are not logged in. Please log in again.."
        );
        router.push("/");
        setIsUploading(false);
        return;
      }
      console.log("Current user ID:", currentUser.id);

      console.log("Dados recebidos no formulário (formData):", formData);

      const termsSelected = formData.buyerInfo?.terms;

      // REFORÇO DA VALIDAÇÃO DE FINANCIAL STATEMENTS NO SUBMIT
      if (termsSelected && termsSelected !== "" && !financialStatementsFile) {
        setError("buyerInfo.financialStatements", {
          type: "required",
          message: "Financial Statements are required if terms are selected.",
        });
        setApiError(
          "Financial Statements are required if terms are selected.."
        );
        setIsUploading(false);
        console.error(
          "Validação de Financial Statements falhou no onSubmit: Termos selecionados, mas arquivo ausente."
        );
        return;
      }
      if (
        financialStatementsFile &&
        financialStatementsFile.type !== "application/pdf"
      ) {
        setError("buyerInfo.financialStatements", {
          type: "manual",
          message: "Financial Statements devem ser um arquivo PDF.",
        });
        setApiError("Financial Statements devem ser um arquivo PDF.");
        setIsUploading(false);
        console.error(
          "Validação de Financial Statements falhou no onSubmit: Arquivo não é PDF."
        );
        return;
      }
      // FIM DO REFORÇO DA VALIDAÇÃO

      let fileUrl: string | null = null;
      if (file) {
        try {
          console.log("Attempting to upload resale certificate.");
          fileUrl = await api.uploadResaleCertificate(file, currentUser.id);
          console.log(
            "Arquivo de certificado de revenda enviado com sucesso:",
            fileUrl
          );
        } catch (error) {
          console.error(
            "Erro ao enviar o arquivo de certificado de revenda:",
            error
          );
          setApiError(
            error instanceof Error
              ? error.message
              : "Erro ao enviar o arquivo. Tente novamente."
          );
          setIsUploading(false);
          return;
        }
      } else {
        console.log("No resale certificate file to upload.");
      }

      const photoUrls: string[] = [];
      if (imageFiles.length